<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_EventLoggerListenerImpl" Id="{4058cdb8-3114-44be-948a-689d6dd9863a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_EventLoggerListenerImpl EXTENDS FB_ListenerBase2
VAR_INPUT
	bListen				: BOOL;
	eLanguageId			: E_LanguageId := E_LanguageId.en_US;
	eEventSorting		: E_EventSorting := E_EventSorting.Ascending;
END_VAR
VAR_IN_OUT
	aLoggedEvents :T_LoggedEvents;
END_VAR
VAR_OUTPUT
	bBusy				: BOOL;
	bDone				: BOOL;
	bError				: BOOL;
	nErrorCode			: DINT;
END_VAR
VAR_INPUT
	ipEventFilter 		: I_TcEventFilterBase; //OPTIONAL: Pointer to an instance of FB_TcEventFilter, if a filter is to be activated. Otherwise, listening to ALL events.
END_VAR
VAR_OUTPUT
END_VAR

VAR
	fbDefaultFilter 	: FB_TcEventFilter;
	pEventToProcess		: POINTER TO ST_LoggedEvent := NULL;
	aRequestEventTexts 	: T_RequestEventTexts;

END_VAR

VAR
	eEventState 		: (INIT:= -10, IDLE := 0, LISTEN:= 1, GETTEXT:= 10, DONE := 20, ERROR := 999) := INIT;
	hr 					: HRESULT;
END_VAR

VAR CONSTANT
	cUpperBound			: UDINT := Param_EventLoggerListener.cMaxConcurrentEvents - 1;
END_VAR


]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE eEventState OF
	INIT:
		hr := Setup(ipEventFilter);
		IF SUCCEEDED(hr) THEN
			eEventState := IDLE;
		ELSE
			eEventState := ERROR;
		END_IF

	IDLE:
		IF bListen THEN
			ClearEventBuffer(aEventsBuffer:= aLoggedEvents, aReqEventTexts:= aRequestEventTexts);
			eEventState := LISTEN;
		END_IF
	
	LISTEN:
		hr := GetNextEvents();
		IF FAILED(hr) THEN
			eEventState := ERROR;
		ELSIF HasReceivedEvents() THEN
			eEventState := GETTEXT;
		END_IF
				
	GETTEXT:
		hr := GetEventTexts(aReqEventTexts:= aRequestEventTexts, aLoggedEvents:= aLoggedEvents);
		IF FAILED(hr) THEN
			eEventState := ERROR;
		ELSIF SUCCEEDED(hr) THEN
			eEventState := DONE;
		ELSE
			{warning 'TODO: Timeout ?!'}
			; // busy 
		END_IF
	
	DONE:
		IF NOT bListen THEN
			eEventState := IDLE;
		END_IF

	ERROR:
		nErrorCode := hr;
END_CASE

bError 	:= eEventState = ERROR; 
bBusy 	:= bListen AND NOT bError AND NOT (eEventState = DONE); 
bDone	:= eEventState = DONE;]]></ST>
    </Implementation>
    <Folder Name="base" Id="{b78c4325-52a7-457e-ba92-82a8db5fa6d5}" />
    <Folder Name="fsm" Id="{3612684c-59de-487e-99d5-0385d74affaa}" />
    <Method Name="ClearEventBuffer" Id="{3ca3ad94-55d7-4681-8230-cc9824631119}">
      <Declaration><![CDATA[METHOD PRIVATE ClearEventBuffer
VAR_IN_OUT
	aEventsBuffer 	: T_LoggedEvents;
	aReqEventTexts 	: T_RequestEventTexts;
END_VAR
VAR
	i : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO cUpperBound DO 	
	MEMSET(destAddr:= ADR(aEventsBuffer[i]), 16#0, SIZEOF(aEventsBuffer[i]));
	aReqEventTexts[i].bAssigned := FALSE;
	aReqEventTexts[i].bReqEventText := FALSE;
	aReqEventTexts[i].bReqClassName := FALSE;
	aReqEventTexts[i].nIndex := 0;
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmplaceFront" Id="{7ce40d7c-1372-4898-b064-2dccefdefb0c}">
      <Declaration><![CDATA[METHOD PRIVATE EmplaceFront : HRESULT
VAR_IN_OUT CONSTANT
	stLoggedEvent : T_LoggedEvents;
END_VAR
VAR
	refFirstItem : REFERENCE TO ST_LoggedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[ShiftEventBuffer(aEventsBuffer:= THIS^.aLoggedEvents);

refFirstItem REF= THIS^.aLoggedEvents[0];

refFirstItem := stLoggedEvent;

EmplaceFront := S_OK;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetEventTexts" Id="{1818870c-187d-4319-95ec-259c65c17dfa}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE GetEventTexts : HRESULT
VAR_IN_OUT
	aLoggedEvents  : T_LoggedEvents;
	aReqEventTexts : T_RequestEventTexts;
END_VAR
VAR
	i				: UDINT;
	hr				: HRESULT;
	refReqEventText : REFERENCE TO ST_RequestEventTexts;
	refLoggedEvent 	: REFERENCE TO ST_LoggedEvent;
	
	bEventDone, bClassNameDone : BOOL;
	bEventError, bClassNameError : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetEventTexts := S_OK;

FOR i := 0 TO cUpperBound DO
	
	refReqEventText REF= aReqEventTexts[i];	
	IF NOT refReqEventText.bAssigned THEN
		CONTINUE;
	END_IF
	
	refLoggedEvent 	REF= aLoggedEvents[refReqEventText.nIndex];
	
	bEventDone 		:= refReqEventText.bAssigned AND (NOT refReqEventText.fbEventText.bBusy AND NOT refReqEventText.fbEventText.bError);
	bClassNameDone 	:= refReqEventText.bAssigned AND (NOT refReqEventText.fbEventClassName.bBusy AND NOT refReqEventText.fbEventClassName.bError);
	
	IF bEventDone AND refReqEventText.bReqEventText THEN
		refReqEventText.fbEventText.GetString(refLoggedEvent.sMessageText, SIZEOF(refLoggedEvent.sMessageText) - 1);
		refReqEventText.bReqEventText := FALSE;		
	END_IF
	
	IF bClassNameDone AND refReqEventText.bReqClassName THEN
		refReqEventText.fbEventClassName.GetString(refLoggedEvent.sEventClassName, SIZEOF(refLoggedEvent.sEventClassName) - 1);
		refReqEventText.bReqClassName := FALSE;
	END_IF
	
	bEventError		:= refReqEventText.bAssigned AND refReqEventText.bReqEventText AND refReqEventText.fbEventText.bError;
	bClassNameError	:= refReqEventText.bAssigned AND refReqEventText.bReqClassName AND refReqEventText.fbEventClassName.bError;
	
	IF bEventError THEN
		hr := refReqEventText.fbEventText.hrErrorCode;
		refLoggedEvent.sMessageText := RequestEventTextsError(sFrmt:= 'Couldn$'t get EventText: hr=0x%08X', F_DINT(hr));	
		refReqEventText.bReqEventText := FALSE;	
	END_IF
	
	IF bClassNameError THEN
		hr := refReqEventText.fbEventClassName.hrErrorCode;
		refLoggedEvent.sEventClassName := RequestEventTextsError(sFrmt:= 'Couldn$'t get ClassName: hr=0x%08X', F_DINT(hr));	
		refReqEventText.bReqClassName := FALSE;
	END_IF
	
	IF refReqEventText.bAssigned AND (refReqEventText.bReqEventText OR_ELSE refReqEventText.bReqClassName) THEN
		GetEventTexts := S_PENDING;
	END_IF
	
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNextEvents" Id="{3c7f655d-2c73-41dc-b085-26c5a3b1cef1}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE GetNextEvents : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetNextEvents := SUPER^.Execute();]]></ST>
      </Implementation>
    </Method>
    <Method Name="HasReceivedEvents" Id="{8cbbbb47-3fab-484f-ab01-e95893daf735}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE HasReceivedEvents : BOOL
VAR
	i : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO cUpperBound DO
	IF THIS^.aRequestEventTexts[i].bAssigned THEN 
		HasReceivedEvents := TRUE;
		RETURN;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAlarmCleared" Id="{036602cd-44fc-40d2-99e6-e6b033452290}" FolderPath="base\">
      <Declaration><![CDATA[METHOD OnAlarmCleared : HRESULT
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR

VAR
	stLoggedEvent : ST_LoggedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stLoggedEvent := To_StLoggedEvent(fbEvent);
stLoggedEvent.nTimestampRaised := 0;
stLoggedEvent.nTimestampCleared := fbEvent.nTimestamp;

OnAlarmCleared := StoreEvent(stLoggedEvent, fbEvent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAlarmConfirmed" Id="{efe870ed-8bbd-4c42-9405-bf33d81f12d4}" FolderPath="base\">
      <Declaration><![CDATA[METHOD OnAlarmConfirmed : HRESULT
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR

VAR
	stLoggedEvent 	: ST_LoggedEvent;
	bNoMoreEvents 	: BOOL;
	hr 				: HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stLoggedEvent := To_StLoggedEvent(fbEvent);
stLoggedEvent.nTimestampRaised := 0;
stLoggedEvent.nTimestampConfirmed := fbEvent.nTimestamp;


OnAlarmConfirmed := StoreEvent(stLoggedEvent, fbEvent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAlarmRaised" Id="{1df5b803-888d-4d2d-ab12-93687f9c1a1e}" FolderPath="base\">
      <Declaration><![CDATA[METHOD OnAlarmRaised : HRESULT
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR

VAR
	stLoggedEvent 	: ST_LoggedEvent;
	bNoMoreEvents 	: BOOL;
	refReqEventText : REFERENCE TO ST_RequestEventTexts;
	nIndex 			: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stLoggedEvent := To_StLoggedEvent(fbEvent);
stLoggedEvent.nTimestampRaised := 0;
stLoggedEvent.nTimestampRaised := fbEvent.nTimestamp;

OnAlarmRaised := StoreEvent(stLoggedEvent, fbEvent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnMessageSent" Id="{b4dac56d-cfe9-4434-ae5b-afa117054bdb}" FolderPath="base\">
      <Declaration><![CDATA[METHOD OnMessageSent : HRESULT
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR

VAR
	stLoggedEvent 	: ST_LoggedEvent;
	bNoMoreEvents 	: BOOL;
	refReqEventText : REFERENCE TO ST_RequestEventTexts;
	nIndex 			: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stLoggedEvent := To_StLoggedEvent(fbEvent);
OnMessageSent := StoreEvent(stLoggedEvent, fbEvent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RequestEventTextsError" Id="{bcdd5814-b414-4459-bd5b-4bdee25082be}">
      <Declaration><![CDATA[METHOD PRIVATE RequestEventTextsError : STRING(Param_EventLoggerListener.cMessageTextLength)
VAR_IN_OUT CONSTANT
	sFrmt : STRING;
END_VAR
VAR_INPUT
	tArg  : T_ARG;	
END_VAR
VAR_INST
	fbFrmt		: FB_FormatString2;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

fbFrmt(
	pFormatString:= ADR(sFrmt), 
	arg1:= tArg,  
	pDstString:= ADR(RequestEventTextsError), 
	nDstSize:= SIZEOF(RequestEventTextsError) - 1, 
	bError=> , 
	nErrId=> );
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Setup" Id="{60bc9ace-1b18-4a40-8fd4-b90018f4f294}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE Setup : HRESULT
VAR_INPUT
	ipEventFilter 	: I_TcEventFilterBase;
END_VAR

VAR
	hr : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF ipEventFilter <> NULL THEN
	hr := SUPER^.Subscribe2(ipEventFilter);
ELSE
	fbDefaultFilter.Clear().EventId.GreaterThan(0);
	hr := SUPER^.Subscribe2(ipEventFilter:= fbDefaultFilter);
END_IF

Setup := hr;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShiftEventBuffer" Id="{383c1100-f67d-4da6-b8b3-6a82091a9c96}">
      <Declaration><![CDATA[METHOD PRIVATE ShiftEventBuffer
VAR_IN_OUT
	aEventsBuffer :T_LoggedEvents;
END_VAR

VAR
	i : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i := cUpperBound TO 1 BY -1 DO
	aEventsBuffer[i] := aEventsBuffer[i - 1];
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="StoreEvent" Id="{c8a103a8-4178-44e8-b0db-04fccc2800ad}">
      <Declaration><![CDATA[METHOD PRIVATE StoreEvent : HRESULT
VAR_INPUT CONSTANT
	stLoggedEvent 	: REFERENCE TO ST_LoggedEvent;
	fbEvent			: REFERENCE TO FB_TcEvent;
END_VAR

VAR
	i : UDINT;
	refReqEventText : REFERENCE TO ST_RequestEventTexts;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i := 0 TO cUpperBound  DO
	IF NOT THIS^.aRequestEventTexts[i].bAssigned THEN
		
		THIS^.aLoggedEvents[i] := stLoggedEvent;
		
		refReqEventText REF= THIS^.aRequestEventTexts[i];
		refReqEventText.nIndex := i;
		refReqEventText.bAssigned := TRUE;
		refReqEventText.fbEventText.Clear();
		refReqEventText.fbEventText.Request(eventClass:= fbEvent.EventClass, nEventId:= fbEvent.nEventId, nLangId:= eLanguageId, ipArgs:= fbEvent.ipArguments);
		refReqEventText.bReqEventText := TRUE;
		refReqEventText.fbEventClassName.Clear();
		refReqEventText.fbEventClassName.Request(eventClass:= fbEvent.EventClass, nLangId:= eLanguageId);
		refReqEventText.bReqClassName := TRUE;

		EXIT;
	END_IF; 
END_FOR

IF THIS^.aRequestEventTexts[cUpperBound].bAssigned THEN
	StoreEvent := S_PENDING;
ELSE
	StoreEVent := S_OK;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="To_StLoggedEvent" Id="{a73d74b9-a770-4992-8783-57031d3eccea}">
      <Declaration><![CDATA[METHOD PRIVATE To_StLoggedEvent : ST_LoggedEvent
VAR_INPUT CONSTANT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[To_StLoggedEvent.nEventId			:= fbEvent.nEventId;
To_StLoggedEvent.nSourceId			:= fbEvent.ipSourceInfo.nId;
To_StLoggedEvent.eSeverity 			:= fbEvent.eSeverity;
To_StLoggedEvent.EventClass 		:= fbEvent.EventClass;
To_StLoggedEvent.nTimestampRaised	:= fbEvent.nTimestamp;
To_StLoggedEvent.nUniqueId 			:= fbEvent.nUniqueId;
fbEvent.GetJsonAttribute(To_StLoggedEvent.sJson, SIZEOF(To_StLoggedEvent.sJson) - 1);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_EventLoggerListenerImpl">
      <LineId Id="435" Count="32" />
      <LineId Id="476" Count="10" />
      <LineId Id="100" Count="0" />
      <LineId Id="488" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.ClearEventBuffer">
      <LineId Id="17" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.EmplaceFront">
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.GetEventTexts">
      <LineId Id="64" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="149" Count="3" />
      <LineId Id="112" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="137" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="134" Count="1" />
      <LineId Id="132" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.GetNextEvents">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.HasReceivedEvents">
      <LineId Id="11" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.OnAlarmCleared">
      <LineId Id="45" Count="3" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.OnAlarmConfirmed">
      <LineId Id="43" Count="5" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.OnAlarmRaised">
      <LineId Id="108" Count="2" />
      <LineId Id="112" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.OnMessageSent">
      <LineId Id="179" Count="0" />
      <LineId Id="199" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.RequestEventTextsError">
      <LineId Id="13" Count="4" />
      <LineId Id="27" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="33" Count="1" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.Setup">
      <LineId Id="10" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.ShiftEventBuffer">
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="26" Count="1" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.StoreEvent">
      <LineId Id="12" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="26" Count="5" />
      <LineId Id="23" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="39" Count="2" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.To_StLoggedEvent">
      <LineId Id="16" Count="5" />
      <LineId Id="26" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>