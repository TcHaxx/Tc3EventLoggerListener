<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_EventLoggerListenerImpl" Id="{4058cdb8-3114-44be-948a-689d6dd9863a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_EventLoggerListenerImpl EXTENDS FB_ListenerBase2
VAR_INPUT
	bListen				: BOOL;
	eLanguageId			: E_LanguageId := E_LanguageId.en_US;
END_VAR
VAR_IN_OUT
	aLoggedEventsBuffer : ARRAY[*] OF ST_LoggedEvent;
END_VAR
VAR_OUTPUT
	bBusy				: BOOL;
	bError				: BOOL;
	nErrorCode			: DINT;
END_VAR
VAR_INPUT
	ipEventFilter 		: I_TcEventFilterBase; //OPTIONAL: Pointer to an instance of FB_TcEventFilter, if a filter is to be activated. Otherwise, listening to ALL events.
END_VAR
VAR_OUTPUT
END_VAR
VAR
	eEventState 		: (INIT:= -10, IDLE := 0, LISTEN:= 1, GETTEXT_INIT := 10, GETTEXT_BUSY := 11, GETTEXT_DONE := 12, DONE := 20, ERROR := 999) := INIT;
	hr 					: HRESULT;
END_VAR


VAR
	fbDefaultFilter 	:	FB_TcEventFilter;
	fbRequestEventText 	: FB_RequestEventText;
	fbRequestEventClassName : FB_RequestEventClassName;
	pEventToProcess	: POINTER TO ST_LoggedEvent := NULL;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[
CASE eEventState OF
	INIT:
		hr := Setup(ipEventFilter);
		IF SUCCEEDED(hr) THEN
			eEventState := IDLE;
		ELSE
			eEventState := ERROR;
		END_IF

	IDLE:
		IF bListen THEN
			ClearEventBuffer(aEventsBuffer:= aLoggedEventsBuffer);
			eEventState := LISTEN;
		END_IF
	
	LISTEN:
		hr := GetNextEvents();
		IF FAILED(hr) THEN
			eEventState := ERROR;
		ELSIF HasReceivedEvents(aEventsBuffer:= aLoggedEventsBuffer) THEN
			eEventState := GETTEXT_INIT;
		END_IF

	GETTEXT_INIT:
		hr := GetTextInit(aLoggedEventsBuffer, pEventToProcess => pEventToProcess);
		IF FAILED(hr) THEN
			eEventState := ERROR;
		ELSIF hr = S_FALSE THEN
			eEventState := DONE;
		ELSE
			eEventState := GETTEXT_BUSY;
		END_IF
				
	GETTEXT_BUSY:
		hr := GetTextBusy();
		IF FAILED(hr) THEN
			eEventState := ERROR;
		ELSIF SUCCEEDED(hr) THEN
			eEventState := GETTEXT_DONE;
		ELSE
			{warning 'TODO: Timeout ?!'}
			; // busy 
		END_IF

	GETTEXT_DONE:
		hr := GetTextDone(pEventToProcess);
		IF FAILED(hr) THEN
			eEventState := ERROR;
		ELSE
			eEventState := GETTEXT_INIT;
		END_IF
	
	DONE:
		IF NOT bListen THEN
			eEventState := IDLE;
		END_IF

	ERROR:
		nErrorCode := hr;
END_CASE

bError 	:= eEventState = ERROR; 
bBusy 	:= bListen AND NOT bError AND NOT (eEventState = DONE); ]]></ST>
    </Implementation>
    <Folder Name="base" Id="{b78c4325-52a7-457e-ba92-82a8db5fa6d5}" />
    <Folder Name="fsm" Id="{3612684c-59de-487e-99d5-0385d74affaa}" />
    <Method Name="ClearEventBuffer" Id="{3ca3ad94-55d7-4681-8230-cc9824631119}">
      <Declaration><![CDATA[METHOD PRIVATE ClearEventBuffer
VAR_IN_OUT
	aEventsBuffer : ARRAY[*] OF ST_LoggedEvent;
END_VAR
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i := LOWER_BOUND(aEventsBuffer, 1) TO UPPER_BOUND(aEventsBuffer, 1) DO
	MEMSET(ADR(aEventsBuffer[i]), 16#0, SIZEOF(ST_LoggedEvent));
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmplaceFront" Id="{7ce40d7c-1372-4898-b064-2dccefdefb0c}">
      <Declaration><![CDATA[METHOD PRIVATE EmplaceFront : HRESULT
VAR_IN_OUT CONSTANT
	stLoggedEvent : ST_LoggedEvent;
END_VAR
VAR
	refFirstItem : REFERENCE TO ST_LoggedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[ShiftEventBuffer(aEventsBuffer:= THIS^.aLoggedEventsBuffer);

refFirstItem REF= THIS^.aLoggedEventsBuffer[LOWER_BOUND(THIS^.aLoggedEventsBuffer, 1)];

refFirstItem := stLoggedEvent;

EmplaceFront := S_OK;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindNextEventToRetrieveText" Id="{3778f499-eaf4-4bda-9ecc-097fe46526bc}">
      <Declaration><![CDATA[METHOD PRIVATE FindNextEventToRetrieveText : POINTER TO ST_LoggedEvent
VAR_IN_OUT CONSTANT
	aEventsBuffer : ARRAY[*] OF ST_LoggedEvent;
END_VAR
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i := LOWER_BOUND(aEventsBuffer, 1) TO UPPER_BOUND(aEventsBuffer, 1) DO
	IF aEventsBuffer[i].nUniqueId > 0 AND aEventsBuffer[i].sMessageText = '' THEN
		FindNextEventToRetrieveText := ADR(aEventsBuffer[i]);
		RETURN;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNextEvents" Id="{3c7f655d-2c73-41dc-b085-26c5a3b1cef1}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE GetNextEvents : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetNextEvents := SUPER^.Execute();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTextBusy" Id="{1818870c-187d-4319-95ec-259c65c17dfa}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE GetTextBusy : HRESULT
VAR
	bBusy  : BOOL;
	bError : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

bBusy := fbRequestEventText.bBusy OR fbRequestEventClassName.bBusy;
bError := fbRequestEventText.bError OR fbRequestEventClassName.bError;

IF bBusy AND NOT bError THEN
	GetTextBusy := S_PENDING;
ELSIF bError THEN
	GetTextBusy := E_FAIL;
ELSE
	GetTextBusy := S_OK;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTextDone" Id="{8e56741d-2075-4a2d-8c21-12c4e4aca18b}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE GetTextDone : HRESULT
VAR_INPUT
	pEventToProcess	: POINTER TO ST_LoggedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pEventToProcess = NULL THEN
	GetTextDone := E_FAIL;
	RETURN;
END_IF

fbRequestEventText.GetString(sResult:= pEventToProcess^.sMessageText, nResult:= SIZEOF(pEventToProcess^.sMessageText));
fbRequestEventClassName.GetString(sResult:= pEventToProcess^.sEventClassName, nResult:= SIZEOF(pEventToProcess^.sEventClassName));

GetTextDone := S_OK;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTextInit" Id="{4920d45a-e756-4b29-bc9b-07b389dfee79}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE GetTextInit : HRESULT
VAR_IN_OUT CONSTANT
	aEventsBuffer 	: ARRAY[*] OF ST_LoggedEvent;
END_VAR

VAR_OUTPUT
	pEventToProcess	: POINTER TO ST_LoggedEvent := NULL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbRequestEventText.Clear();
fbRequestEventClassName.Clear();

pEventToProcess := FindNextEventToRetrieveText(aEventsBuffer);

IF pEventToProcess = NULL THEN
	GetTextInit := S_FALSE;
	RETURN;
END_IF

GetTextInit := fbRequestEventText.Request(eventClass:=pEventToProcess^.EventClass, nEventId:=pEventToProcess^.nEventId, nLangId:=TO_DINT(eLanguageId), ipArgs:=pEventToProcess^.ipArguments );
IF FAILED(GetTextInit) THEN
	RETURN;
END_IF

GetTextInit := fbRequestEventClassName.Request(eventClass:= pEventToProcess^.EventClass, nLangId:=TO_DINT(eLanguageId));
IF FAILED(GetTextInit) THEN
	RETURN;
END_IF

GetTextInit := S_OK;]]></ST>
      </Implementation>
    </Method>
    <Method Name="HasReceivedEvents" Id="{8cbbbb47-3fab-484f-ab01-e95893daf735}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE HasReceivedEvents : BOOL
VAR_IN_OUT CONSTANT
	aEventsBuffer : ARRAY[*] OF ST_LoggedEvent;
END_VAR
VAR
	i : DINT;
	emptyEventClass : GUID;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := LOWER_BOUND(aEventsBuffer, 1) TO UPPER_BOUND(aEventsBuffer, 1) DO
	IF aEventsBuffer[i].nUniqueID > 0 OR aEventsBuffer[i].nSourceId > 0 OR aEventsBuffer[i].nTimestampRaised > 0 THEN 
		HasReceivedEvents := TRUE;
		EXIT;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAlarmCleared" Id="{036602cd-44fc-40d2-99e6-e6b033452290}" FolderPath="base\">
      <Declaration><![CDATA[METHOD OnAlarmCleared : HRESULT
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR

VAR
	stLoggedEvent : ST_LoggedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stLoggedEvent := To_StLoggedEvent(fbEvent);
stLoggedEvent.nTimestampRaised := 0;
stLoggedEvent.nTimeStampCleared := fbEvent.nTimestamp;
EmplaceFront(stLoggedEvent);

IF UPPER_BOUND(THIS^.aLoggedEventsBuffer, 1) > 1 THEN
	OnAlarmCleared := S_OK; // in order to receive more callbacks (Set <> S_OK in order to cancel the callbacks for this program cycle.)
ELSE
	OnAlarmCleared := S_FALSE;	// Only one event at a time, hence next call to SUPER^.Execute().
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAlarmConfirmed" Id="{efe870ed-8bbd-4c42-9405-bf33d81f12d4}" FolderPath="base\">
      <Declaration><![CDATA[METHOD OnAlarmConfirmed : HRESULT
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR

VAR
	stLoggedEvent : ST_LoggedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stLoggedEvent := To_StLoggedEvent(fbEvent);
stLoggedEvent.nTimestampRaised := 0;
stLoggedEvent.nTimestampConfirmed := fbEvent.nTimestamp;
EmplaceFront(stLoggedEvent);

IF UPPER_BOUND(THIS^.aLoggedEventsBuffer, 1) > 1 THEN
	OnAlarmConfirmed := S_OK; // in order to receive more callbacks (Set <> S_OK in order to cancel the callbacks for this program cycle.)
ELSE
	OnAlarmConfirmed := S_FALSE;	// Only one event at a time, hence next call to SUPER^.Execute().
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAlarmRaised" Id="{1df5b803-888d-4d2d-ab12-93687f9c1a1e}" FolderPath="base\">
      <Declaration><![CDATA[METHOD OnAlarmRaised : HRESULT
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR

VAR
	stLoggedEvent : ST_LoggedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stLoggedEvent := To_StLoggedEvent(fbEvent);
EmplaceFront(stLoggedEvent);

IF UPPER_BOUND(THIS^.aLoggedEventsBuffer, 1) > 1 THEN
	OnAlarmRaised := S_OK; // in order to receive more callbacks (Set <> S_OK in order to cancel the callbacks for this program cycle.)
ELSE
	OnAlarmRaised := S_FALSE;	// Only one event at a time, hence next call to SUPER^.Execute().
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnMessageSent" Id="{b4dac56d-cfe9-4434-ae5b-afa117054bdb}" FolderPath="base\">
      <Declaration><![CDATA[METHOD OnMessageSent : HRESULT
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR

VAR
	stLoggedEvent : ST_LoggedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stLoggedEvent := To_StLoggedEvent(fbEvent);
EmplaceFront(stLoggedEvent);

IF UPPER_BOUND(THIS^.aLoggedEventsBuffer, 1) > 1 THEN
	OnMessageSent := S_OK; // in order to receive more callbacks (Set <> S_OK in order to cancel the callbacks for this program cycle.)
ELSE
	OnMessageSent := S_FALSE;	// Only one event at a time, hence next call to SUPER^.Execute().
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Setup" Id="{60bc9ace-1b18-4a40-8fd4-b90018f4f294}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE Setup : HRESULT
VAR_INPUT
	ipEventFilter 	: I_TcEventFilterBase;
END_VAR

VAR
	hr : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF ipEventFilter <> NULL THEN
	hr := SUPER^.Subscribe2(ipEventFilter);
ELSE
	fbDefaultFilter.Clear().EventId.GreaterThan(0);
	hr := SUPER^.Subscribe2(ipEventFilter:= fbDefaultFilter);
END_IF

Setup := hr;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShiftEventBuffer" Id="{383c1100-f67d-4da6-b8b3-6a82091a9c96}">
      <Declaration><![CDATA[METHOD PRIVATE ShiftEventBuffer
VAR_IN_OUT
	aEventsBuffer : ARRAY[*] OF ST_LoggedEvent;
END_VAR

VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i := UPPER_BOUND(aEventsBuffer, 1) TO LOWER_BOUND(aEventsBuffer, 1) + 1 BY -1 DO
	aEventsBuffer[i] := aEventsBuffer[i - 1];
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="To_StLoggedEvent" Id="{a73d74b9-a770-4992-8783-57031d3eccea}">
      <Declaration><![CDATA[METHOD PRIVATE To_StLoggedEvent : ST_LoggedEvent
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[To_StLoggedEvent.nEventId			:= fbEvent.nEventId;
To_StLoggedEvent.nSourceId			:= fbEvent.ipSourceInfo.nId;
To_StLoggedEvent.eSeverity 			:= fbEvent.eSeverity;
To_StLoggedEvent.EventClass 		:= fbEvent.EventClass;
To_StLoggedEvent.nTimestampRaised	:= fbEvent.nTimestamp;
To_StLoggedEvent.nUniqueId 			:= fbEvent.nUniqueId;
To_StLoggedEvent.ipArguments		:= fbEvent.ipArguments;
 ]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_EventLoggerListenerImpl">
      <LineId Id="203" Count="0" />
      <LineId Id="152" Count="18" />
      <LineId Id="172" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="174" Count="2" />
      <LineId Id="201" Count="0" />
      <LineId Id="204" Count="1" />
      <LineId Id="228" Count="1" />
      <LineId Id="212" Count="1" />
      <LineId Id="206" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="215" Count="4" />
      <LineId Id="221" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="224" Count="2" />
      <LineId Id="230" Count="1" />
      <LineId Id="179" Count="9" />
      <LineId Id="100" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.ClearEventBuffer">
      <LineId Id="7" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.EmplaceFront">
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.FindNextEventToRetrieveText">
      <LineId Id="8" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.GetNextEvents">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.GetTextBusy">
      <LineId Id="44" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="46" Count="3" />
      <LineId Id="53" Count="1" />
      <LineId Id="51" Count="1" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.GetTextDone">
      <LineId Id="44" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="1" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.GetTextInit">
      <LineId Id="44" Count="19" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.HasReceivedEvents">
      <LineId Id="11" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.OnAlarmCleared">
      <LineId Id="26" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="27" Count="4" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.OnAlarmConfirmed">
      <LineId Id="23" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="28" Count="3" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.OnAlarmRaised">
      <LineId Id="88" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="83" Count="4" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.OnMessageSent">
      <LineId Id="104" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="96" Count="2" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.Setup">
      <LineId Id="10" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.ShiftEventBuffer">
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="26" Count="1" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.To_StLoggedEvent">
      <LineId Id="16" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>