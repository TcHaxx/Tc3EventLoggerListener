<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_EventLoggerListenerImpl" Id="{4058cdb8-3114-44be-948a-689d6dd9863a}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK FB_EventLoggerListenerImpl EXTENDS FB_ListenerBase2
VAR_INPUT
	bEnable				: BOOL;
	eLanguageId			: E_LanguageId := E_LanguageId.en_US;
	ipSort				: I_LoggedEventsSort := NULL;
END_VAR
VAR_IN_OUT
	aLoggedEvents 		:	T_LoggedEvents;
END_VAR
VAR_OUTPUT
	bBusy				: BOOL;
	bDone				: BOOL;
	bError				: BOOL;
	nErrorCode			: DINT;
	nReceivedEvents		: UDINT;
END_VAR
VAR_INPUT
	ipEventFilter 		: I_TcEventFilterBase; //OPTIONAL: Pointer to an instance of FB_TcEventFilter, if a filter is to be activated. Otherwise, listening to ALL events.
END_VAR
VAR_OUTPUT
END_VAR

VAR
	fbDefaultFilter 	: FB_TcEventFilter;
	pEventToProcess		: POINTER TO ST_LoggedEvent := NULL;
	aRequestEventTexts 	: T_RequestEventTexts;
	refLoggedEvents 	: REFERENCE TO T_LoggedEvents;	// Prevents warning "Access to VAR_IN_OUT from external context"
END_VAR

VAR
	hr 					: HRESULT;
END_VAR

VAR CONSTANT
	cUpperBound			: UDINT := Param_EventLoggerListener.cMaxConcurrentEvents - 1;
END_VAR

VAR
	{attribute 'hide'}
	eEventState 		: E_EventLoggerListenerState := E_EventLoggerListenerState.eInit;
	{attribute 'hide'}
    {attribute 'instance-path'} 
    {attribute 'noinit'} 
	sInstancePath		: STRING;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[refLoggedEvents REF= aLoggedEvents;

IF NOT bEnable THEN
	eEventLoggerListenerState := E_EventLoggerListenerState.eIdle;
END_IF

CASE eEventLoggerListenerState OF
	
	E_EventLoggerListenerState.eIdle:
		hr := Idle();
		ActivateStateOrError(hr, eNextState:= E_EventLoggerListenerState.eInit); 
		
	E_EventLoggerListenerState.eInit:		
		hr := Init(aLoggedEvents);
		IF FAILED(hr) THEN
			eEventLoggerListenerState := E_EventLoggerListenerState.eError;
		ELSE
			eEventLoggerListenerState := E_EventLoggerListenerState.eListening;
		END_IF
		
	E_EventLoggerListenerState.eListening:
		hr := Listening();
		IF FAILED(hr) THEN
			eEventLoggerListenerState := E_EventLoggerListenerState.eError;
		ELSIF HasReceivedEvents() THEN
			eEventLoggerListenerState := E_EventLoggerListenerState.eRetrieveTexts;
		END_IF
				
	E_EventLoggerListenerState.eRetrieveTexts:
		hr := RetrieveTexts(aLoggedEvents);
		ActivateStateOrError(hr, eNextState:= E_EventLoggerListenerState.eSortEvents);
		
	E_EventLoggerListenerState.eSortEvents:
		hr := SortEvents();
		IF FAILED(hr) THEN
			eEventLoggerListenerState := E_EventLoggerListenerState.eError;
		ELSE
			eEventLoggerListenerState := E_EventLoggerListenerState.eDone;
		END_IF
	
	E_EventLoggerListenerState.eDone:
		Done();
		
	E_EventLoggerListenerState.eError:
		Error(hr);
		
END_CASE

bError 	:= eEventLoggerListenerState = E_EventLoggerListenerState.eError; 
bBusy 	:= bEnable AND NOT bError AND NOT (eEventLoggerListenerState = E_EventLoggerListenerState.eDone); 
bDone	:= eEventLoggerListenerState = E_EventLoggerListenerState.eDone;]]></ST>
    </Implementation>
    <Folder Name="base" Id="{b78c4325-52a7-457e-ba92-82a8db5fa6d5}" />
    <Folder Name="fsm" Id="{3612684c-59de-487e-99d5-0385d74affaa}" />
    <Folder Name="helper" Id="{f337e68c-c3d9-419b-b1d1-9f09c82a46a4}" />
    <Method Name="ActivateStateOrError" Id="{06782e41-3001-476f-96a4-1b9ea855481f}" FolderPath="helper\">
      <Declaration><![CDATA[METHOD PRIVATE ActivateStateOrError : BOOL
VAR_INPUT
	hr 			: HRESULT;
	eNextState 	: E_EventLoggerListenerState;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ActivateStateOrError := TRUE;
IF FAILED(hr) THEN
	eEventLoggerListenerState := E_EventLoggerListenerState.eError;
ELSIF hr = S_OK THEN
	eEventLoggerListenerState := eNextState;
ELSE 
	// other results, e.g. S_PENDING, S_FALSE
	ActivateStateOrError := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearEventBuffer" Id="{3ca3ad94-55d7-4681-8230-cc9824631119}" FolderPath="helper\">
      <Declaration><![CDATA[METHOD PRIVATE ClearEventBuffer
VAR_IN_OUT
	aEventsBuffer 	: T_LoggedEvents;
	aReqEventTexts 	: T_RequestEventTexts;
END_VAR
VAR
	i : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nReceivedEvents := 0;
FOR i := 0 TO cUpperBound DO 	
	MEMSET(destAddr:= ADR(aEventsBuffer[i]), 16#0, SIZEOF(aEventsBuffer[i]));
	aReqEventTexts[i].bAssigned := FALSE;
	aReqEventTexts[i].bReqEventText := FALSE;
	aReqEventTexts[i].bReqClassName := FALSE;
	aReqEventTexts[i].nIndex := 0;
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Done" Id="{97b74cd5-a3e6-48b0-8ac8-634d2ffd27a2}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE Done : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Done := S_OK;]]></ST>
      </Implementation>
    </Method>
    <Property Name="eEventLoggerListenerState" Id="{c801340b-8064-4b00-bfee-10498dc46f9d}">
      <Declaration><![CDATA[PROPERTY PRIVATE eEventLoggerListenerState : E_EventLoggerListenerState]]></Declaration>
      <Get Name="Get" Id="{2d707ac7-e60b-48a5-bee4-5795db8b3b79}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eEventLoggerListenerState := eEventState;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e3e6bb92-6c2c-4f6b-a5d3-12ce1120596d}">
        <Declaration><![CDATA[VAR
	sStateOld : STRING;
END_VAR

VAR_INST
	fbFrmt : FB_FormatString2;
	sErrorMessage : T_MaxString;
END_VAR

VAR CONSTANT
	cErrorFrmt : STRING := '[%s] Error in step $'%s$': hr=0x%08X';
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[ 
IF eEventState <> eEventLoggerListenerState AND_THEN eEventLoggerListenerState = E_EventLoggerListenerState.eError THEN
	sStateOld := TO_STRING(eEventState);	
	fbFrmt(
	pFormatString:= ADR(cErrorFrmt) , 
	arg1:= F_STRINGEx(sInstancePath),
	arg2:= F_STRINGEx(sStateOld), 
	arg3:= F_DINT(hr), 
	pDstString:= ADR(sErrorMessage), 
	nDstSize:= SIZEOF(sErrorMessage) -1 );
	ADSLOGSTR(msgCtrlMask:= ADSLOG_MSGTYPE_ERROR, msgFmtStr:= '%s', strArg:= sErrorMessage);
END_IF

eEventState := eEventLoggerListenerState;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Error" Id="{00ba3260-0bfe-480d-9fb0-6ff349354df1}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE Error
VAR_INPUT
	hr : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nErrorCode := hr;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetEventTexts" Id="{1818870c-187d-4319-95ec-259c65c17dfa}" FolderPath="helper\">
      <Declaration><![CDATA[METHOD PRIVATE GetEventTexts : HRESULT
VAR_IN_OUT
	aLoggedEvents  : T_LoggedEvents;
	aReqEventTexts : T_RequestEventTexts;
END_VAR
VAR
	i				: UDINT;
	hr				: HRESULT;
	refReqEventText : REFERENCE TO ST_RequestEventTexts;
	refLoggedEvent 	: REFERENCE TO ST_LoggedEvent;
	
	bEventDone, bClassNameDone : BOOL;
	bEventError, bClassNameError : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetEventTexts := S_OK;

FOR i := 0 TO cUpperBound DO
	
	refReqEventText REF= aReqEventTexts[i];	
	IF NOT refReqEventText.bAssigned THEN
		CONTINUE;
	END_IF
	
	refLoggedEvent 	REF= aLoggedEvents[refReqEventText.nIndex];
	
	bEventDone 		:= refReqEventText.bAssigned AND (NOT refReqEventText.fbEventText.bBusy AND NOT refReqEventText.fbEventText.bError);
	bClassNameDone 	:= refReqEventText.bAssigned AND (NOT refReqEventText.fbEventClassName.bBusy AND NOT refReqEventText.fbEventClassName.bError);
	
	IF bEventDone AND refReqEventText.bReqEventText THEN
		refReqEventText.fbEventText.GetString(refLoggedEvent.sMessageText, SIZEOF(refLoggedEvent.sMessageText) - 1);
		refReqEventText.bReqEventText := FALSE;		
	END_IF
	
	IF bClassNameDone AND refReqEventText.bReqClassName THEN
		refReqEventText.fbEventClassName.GetString(refLoggedEvent.sEventClassName, SIZEOF(refLoggedEvent.sEventClassName) - 1);
		refReqEventText.bReqClassName := FALSE;
	END_IF
	
	bEventError		:= refReqEventText.bAssigned AND refReqEventText.bReqEventText AND refReqEventText.fbEventText.bError;
	bClassNameError	:= refReqEventText.bAssigned AND refReqEventText.bReqClassName AND refReqEventText.fbEventClassName.bError;
	
	IF bEventError THEN
		hr := refReqEventText.fbEventText.hrErrorCode;
		refLoggedEvent.sMessageText := RequestEventTextsError(sFrmt:= 'Couldn$'t get EventText: hr=0x%08X', F_DINT(hr));	
		refReqEventText.bReqEventText := FALSE;	
	END_IF
	
	IF bClassNameError THEN
		hr := refReqEventText.fbEventClassName.hrErrorCode;
		refLoggedEvent.sEventClassName := RequestEventTextsError(sFrmt:= 'Couldn$'t get ClassName: hr=0x%08X', F_DINT(hr));	
		refReqEventText.bReqClassName := FALSE;
	END_IF
	
	IF refReqEventText.bAssigned AND (refReqEventText.bReqEventText OR_ELSE refReqEventText.bReqClassName) THEN
		GetEventTexts := S_PENDING;
	END_IF
	
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HasReceivedEvents" Id="{8cbbbb47-3fab-484f-ab01-e95893daf735}" FolderPath="helper\">
      <Declaration><![CDATA[METHOD PRIVATE HasReceivedEvents : BOOL
VAR
	i : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO cUpperBound DO
	IF THIS^.aRequestEventTexts[i].bAssigned THEN 
		HasReceivedEvents := TRUE;
		RETURN;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Idle" Id="{1b4a2ea8-f3e9-4435-b461-f80660053ce1}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE Idle : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Idle := S_PENDING;

IF bEnable THEN
	Idle := S_OK;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{ca819f6a-4cec-46f2-ac1d-8a094fd7a327}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE Init : HRESULT
VAR_IN_OUT
	aLoggedEvents 		:	T_LoggedEvents;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[ClearEventBuffer(aEventsBuffer:= aLoggedEvents, aReqEventTexts:= aRequestEventTexts);
Init := Setup(ipEventFilter);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Listening" Id="{70857e28-706b-4a07-acde-fbbdd3cbfd51}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE Listening : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Listening := SUPER^.Execute();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAlarmCleared" Id="{036602cd-44fc-40d2-99e6-e6b033452290}" FolderPath="base\">
      <Declaration><![CDATA[METHOD OnAlarmCleared : HRESULT
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR

VAR
	stLoggedEvent : ST_LoggedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stLoggedEvent := To_StLoggedEvent(fbEvent);
stLoggedEvent.nTimestampRaised := 0;
stLoggedEvent.nTimestampCleared := fbEvent.nTimestamp;

OnAlarmCleared := StoreEvent(stLoggedEvent, fbEvent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAlarmConfirmed" Id="{efe870ed-8bbd-4c42-9405-bf33d81f12d4}" FolderPath="base\">
      <Declaration><![CDATA[METHOD OnAlarmConfirmed : HRESULT
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR

VAR
	stLoggedEvent 	: ST_LoggedEvent;
	bNoMoreEvents 	: BOOL;
	hr 				: HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stLoggedEvent := To_StLoggedEvent(fbEvent);
stLoggedEvent.nTimestampRaised := 0;
stLoggedEvent.nTimestampConfirmed := fbEvent.nTimestamp;

OnAlarmConfirmed := StoreEvent(stLoggedEvent, fbEvent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAlarmRaised" Id="{1df5b803-888d-4d2d-ab12-93687f9c1a1e}" FolderPath="base\">
      <Declaration><![CDATA[METHOD OnAlarmRaised : HRESULT
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR

VAR
	stLoggedEvent 	: ST_LoggedEvent;
	bNoMoreEvents 	: BOOL;
	refReqEventText : REFERENCE TO ST_RequestEventTexts;
	nIndex 			: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stLoggedEvent := To_StLoggedEvent(fbEvent);
stLoggedEvent.nTimestampRaised := fbEvent.nTimestamp;

OnAlarmRaised := StoreEvent(stLoggedEvent, fbEvent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnMessageSent" Id="{b4dac56d-cfe9-4434-ae5b-afa117054bdb}" FolderPath="base\">
      <Declaration><![CDATA[METHOD OnMessageSent : HRESULT
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR

VAR
	stLoggedEvent 	: ST_LoggedEvent;
	bNoMoreEvents 	: BOOL;
	refReqEventText : REFERENCE TO ST_RequestEventTexts;
	nIndex 			: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stLoggedEvent := To_StLoggedEvent(fbEvent);
OnMessageSent := StoreEvent(stLoggedEvent, fbEvent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RequestEventTextsError" Id="{bcdd5814-b414-4459-bd5b-4bdee25082be}" FolderPath="helper\">
      <Declaration><![CDATA[METHOD PRIVATE RequestEventTextsError : STRING(Param_EventLoggerListener.cMessageTextLength)
VAR_IN_OUT CONSTANT
	sFrmt : STRING;
END_VAR
VAR_INPUT
	tArg  : T_ARG;	
END_VAR
VAR_INST
	fbFrmt		: FB_FormatString2;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

fbFrmt(
	pFormatString:= ADR(sFrmt), 
	arg1:= tArg,  
	pDstString:= ADR(RequestEventTextsError), 
	nDstSize:= SIZEOF(RequestEventTextsError) - 1, 
	bError=> , 
	nErrId=> );
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RetrieveTexts" Id="{ed6388c3-dbce-40b2-9619-639541b293b8}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE RetrieveTexts : HRESULT
VAR_IN_OUT
	aLoggedEvents 		:	T_LoggedEvents;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning 'TODO: Timeout ?!'}

hr := GetEventTexts(aReqEventTexts:= aRequestEventTexts, aLoggedEvents:= aLoggedEvents);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Setup" Id="{60bc9ace-1b18-4a40-8fd4-b90018f4f294}" FolderPath="helper\">
      <Declaration><![CDATA[METHOD PRIVATE Setup : HRESULT
VAR_INPUT
	ipEventFilter 	: I_TcEventFilterBase;
END_VAR

VAR
	hr : HRESULT;
END_VAR


VAR_INST
	ipEventFilterInUse	: I_TcEventFilterBase;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ipEventFilterInUse <> NULL AND_THEN (ipEventFilter = NULL OR_ELSE ipEventFilter = ipEventFilterInUse) THEN
	Setup := S_FALSE;
	RETURN;
END_IF

IF ipEventFilterInUse <> NULL  AND_THEN ipEventFilter <> ipEventFilterInUse THEN
	SUPER^.Unsubscribe();
END_IF

IF ipEventFilter <> NULL THEN	
	hr := SUPER^.Subscribe2(ipEventFilter);
	ipEventFilterInUse := ipEventFilter;
ELSE
	fbDefaultFilter.Clear().EventId.GreaterThan(0);
	hr := SUPER^.Subscribe2(ipEventFilter:= fbDefaultFilter);
	ipEventFilterInUse := fbDefaultFilter;
END_IF

Setup := hr;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SortEvents" Id="{4d62757f-0032-4797-944f-5b280b83a341}" FolderPath="fsm\">
      <Declaration><![CDATA[METHOD PRIVATE SortEvents : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

IF ipSort = NULL THEN
	SortEvents := S_OK;
	RETURN;
END_IF

IF NOT __ISVALIDREF(refLoggedEvents) THEN
	SortEvents := E_FAIL;
	RETURN;
END_IF;

SortEvents := ipSort.Sort(aLoggedEvents:= refLoggedEvents);]]></ST>
      </Implementation>
    </Method>
    <Method Name="StoreEvent" Id="{c8a103a8-4178-44e8-b0db-04fccc2800ad}" FolderPath="helper\">
      <Declaration><![CDATA[METHOD PRIVATE StoreEvent : HRESULT
VAR_INPUT CONSTANT
	stLoggedEvent 	: REFERENCE TO ST_LoggedEvent;
	fbEvent			: REFERENCE TO FB_TcEvent;
END_VAR

VAR
	i : UDINT;
	refReqEventText : REFERENCE TO ST_RequestEventTexts;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT __ISVALIDREF(refLoggedEvents) THEN
	StoreEvent := E_FAIL;
	RETURN;
END_IF;	

FOR i := 0 TO cUpperBound  DO
	IF NOT THIS^.aRequestEventTexts[i].bAssigned THEN
		
	
		refLoggedEvents[i] := stLoggedEvent;
		
		refReqEventText REF= THIS^.aRequestEventTexts[i];
		refReqEventText.nIndex := i;
		refReqEventText.bAssigned := TRUE;
		refReqEventText.fbEventText.Clear();
		refReqEventText.fbEventText.Request(eventClass:= fbEvent.EventClass, nEventId:= fbEvent.nEventId, nLangId:= eLanguageId, ipArgs:= fbEvent.ipArguments);
		refReqEventText.bReqEventText := TRUE;
		refReqEventText.fbEventClassName.Clear();
		refReqEventText.fbEventClassName.Request(eventClass:= fbEvent.EventClass, nLangId:= eLanguageId);
		refReqEventText.bReqClassName := TRUE;
		
		nReceivedEvents := nReceivedEvents + 1;
		EXIT;
	END_IF; 
END_FOR

IF THIS^.aRequestEventTexts[cUpperBound].bAssigned THEN
	StoreEvent := S_PENDING;
ELSE
	StoreEVent := S_OK;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="To_StLoggedEvent" Id="{a73d74b9-a770-4992-8783-57031d3eccea}" FolderPath="helper\">
      <Declaration><![CDATA[METHOD PRIVATE To_StLoggedEvent : ST_LoggedEvent
VAR_INPUT CONSTANT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[To_StLoggedEvent.nEventId			:= fbEvent.nEventId;
To_StLoggedEvent.nSourceId			:= fbEvent.ipSourceInfo.nId;
To_StLoggedEvent.sSourceName		:= fbEvent.ipSourceInfo.sName;
To_StLoggedEvent.eSeverity 			:= fbEvent.eSeverity;
To_StLoggedEvent.EventClass 		:= fbEvent.EventClass;
To_StLoggedEvent.nTimestampRaised	:= fbEvent.nTimestamp;
To_StLoggedEvent.nUniqueId 			:= fbEvent.nUniqueId;

fbEvent.GetJsonAttribute(To_StLoggedEvent.sJson, SIZEOF(To_StLoggedEvent.sJson) - 1);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_EventLoggerListenerImpl">
      <LineId Id="577" Count="1" />
      <LineId Id="553" Count="0" />
      <LineId Id="555" Count="1" />
      <LineId Id="554" Count="0" />
      <LineId Id="435" Count="1" />
      <LineId Id="557" Count="0" />
      <LineId Id="550" Count="0" />
      <LineId Id="593" Count="0" />
      <LineId Id="558" Count="0" />
      <LineId Id="443" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="601" Count="2" />
      <LineId Id="650" Count="0" />
      <LineId Id="604" Count="0" />
      <LineId Id="594" Count="0" />
      <LineId Id="450" Count="0" />
      <LineId Id="456" Count="0" />
      <LineId Id="584" Count="0" />
      <LineId Id="596" Count="0" />
      <LineId Id="585" Count="1" />
      <LineId Id="582" Count="0" />
      <LineId Id="457" Count="1" />
      <LineId Id="467" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="597" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="580" Count="0" />
      <LineId Id="651" Count="3" />
      <LineId Id="587" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="477" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="598" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="574" Count="0" />
      <LineId Id="564" Count="0" />
      <LineId Id="484" Count="2" />
      <LineId Id="100" Count="0" />
      <LineId Id="488" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.ActivateStateOrError">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.ClearEventBuffer">
      <LineId Id="69" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.Done">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.eEventLoggerListenerState.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.eEventLoggerListenerState.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="30" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.Error">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.GetEventTexts">
      <LineId Id="64" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="149" Count="3" />
      <LineId Id="112" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="137" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="134" Count="1" />
      <LineId Id="132" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.HasReceivedEvents">
      <LineId Id="11" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.Idle">
      <LineId Id="8" Count="1" />
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.Init">
      <LineId Id="8" Count="1" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.Listening">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.OnAlarmCleared">
      <LineId Id="45" Count="3" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.OnAlarmConfirmed">
      <LineId Id="43" Count="2" />
      <LineId Id="47" Count="1" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.OnAlarmRaised">
      <LineId Id="108" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.OnMessageSent">
      <LineId Id="179" Count="0" />
      <LineId Id="199" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.RequestEventTextsError">
      <LineId Id="13" Count="4" />
      <LineId Id="27" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="33" Count="1" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.RetrieveTexts">
      <LineId Id="27" Count="1" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.Setup">
      <LineId Id="65" Count="17" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.SortEvents">
      <LineId Id="6" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="10" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.StoreEvent">
      <LineId Id="55" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="26" Count="5" />
      <LineId Id="23" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="39" Count="2" />
    </LineIds>
    <LineIds Name="FB_EventLoggerListenerImpl.To_StLoggedEvent">
      <LineId Id="16" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="18" Count="3" />
      <LineId Id="30" Count="0" />
      <LineId Id="26" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>